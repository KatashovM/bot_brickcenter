
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from ..states import OrderForm
from ..storage import OrderDraft
from ..keyboards import quantity_unit_kb, delivery_type_kb, confirm_kb, main_kb
from ..config import settings
from ..models import SessionLocal, Order
from ..mailer import send_mail
import app.models as m
from app.config import settings
router=Router()
@router.message(F.text=="üß± –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")
@router.message(F.text=="/order")
async def order_start(message: Message, state: FSMContext):
    await state.set_state(OrderForm.material); await state.update_data(draft=OrderDraft().__dict__)
    await message.answer("–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω—É–∂–µ–Ω? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —Ü–≤–µ—Ç/–º–∞—Ä–∫—É.")
@router.message(OrderForm.material)
async def set_material(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.material=message.text.strip()
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.quantity_value)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.")
@router.message(OrderForm.quantity_value, F.text.regexp(r"^\d+[\,\.]?\d*$"))
async def set_quantity_value(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.quantity_value=message.text.replace(",", ".")
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.quantity_unit)
    await message.answer("–í –∫–∞–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö?", reply_markup=quantity_unit_kb())
@router.message(OrderForm.quantity_value)
async def quantity_value_invalid(message: Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 120 –∏–ª–∏ 18.5")
@router.callback_query(F.data.startswith("unit:"))
async def set_quantity_unit(c: CallbackQuery, state: FSMContext):
    u=c.data.split(":",1)[1]; d=OrderDraft(**(await state.get_data()).get("draft")); d.quantity_unit=u
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.delivery_type)
    await c.message.edit_reply_markup(); await c.message.answer("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏?", reply_markup=delivery_type_kb())
@router.callback_query(F.data.startswith("del:"))
async def set_delivery_type(c: CallbackQuery, state: FSMContext):
    t=c.data.split(":",1)[1]; d=OrderDraft(**(await state.get_data()).get("draft")); d.delivery_type=t
    await state.update_data(draft=d.__dict__); await c.message.edit_reply_markup()
    if t=="site": await state.set_state(OrderForm.delivery_address); await c.message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –æ–±—ä–µ–∫—Ç).")
    else: await state.set_state(OrderForm.name); await c.message.answer("–í–∞—à–µ –∏–º—è?")
@router.message(OrderForm.delivery_address)
async def set_delivery_address(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.delivery_address=message.text.strip()
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.name); await message.answer("–í–∞—à–µ –∏–º—è?")
@router.message(OrderForm.name)
async def set_name(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.name=message.text.strip()
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.phone); await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞? (+7...) ")
@router.message(OrderForm.phone, F.text.regexp(r"^\+?\d[\d\s\-]{7,}$"))
async def set_phone(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.phone=message.text.strip()
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.email); await message.answer("Email –¥–ª—è —Å–≤—è–∑–∏ –∏ —Å—á—ë—Ç–∞?")
@router.message(OrderForm.phone)
async def phone_invalid(message: Message): await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67")
@router.message(OrderForm.email, F.text.regexp(r"^[^\s@]+@[^\s@]+\.[^\s@]+$"))
async def set_email(message: Message, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft")); d.email=message.text.strip()
    await state.update_data(draft=d.__dict__); await state.set_state(OrderForm.confirm)
    unit="—à—Ç" if d.quantity_unit=="pcs" else "–º¬≤"; deliv="–ù–∞ —Å–∫–ª–∞–¥" if d.delivery_type=="warehouse" else "–î–æ –æ–±—ä–µ–∫—Ç–∞"
    lines=["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:", f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {d.material}", f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {d.quantity_value} {unit}", f"–î–æ—Å—Ç–∞–≤–∫–∞: {deliv}"]
    if d.delivery_type=="site": lines.append(f"–ê–¥—Ä–µ—Å: {d.delivery_address}")
    lines += [f"–ò–º—è: {d.name}", f"–¢–µ–ª–µ—Ñ–æ–Ω: {d.phone}", f"Email: {d.email}"]
    await message.answer("\n".join(lines), reply_markup=confirm_kb())
@router.message(OrderForm.email)
async def email_invalid(message: Message): await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π email. –ü—Ä–∏–º–µ—Ä: name@example.com")
@router.callback_query(F.data=="confirm:cancel")
async def confirm_cancel(c: CallbackQuery, state: FSMContext):
    await state.clear(); await c.message.edit_reply_markup(); await c.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
@router.callback_query(F.data=="confirm:edit")
async def confirm_edit(c: CallbackQuery, state: FSMContext):
    await c.message.edit_reply_markup(); await c.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–Ω–æ–≤–æ."); await state.set_state(OrderForm.material)
@router.callback_query(F.data=="confirm:yes")
async def confirm_yes(c: CallbackQuery, state: FSMContext):
    d=OrderDraft(**(await state.get_data()).get("draft"))
    if m.Engine is None or m.SessionLocal is None:
        m.setup_db(settings.db_path)
    s=m.SessionLocal()
    s.add(Order(material=d.material or "", quantity_value=d.quantity_value or "", quantity_unit=d.quantity_unit or "",
                delivery_type=d.delivery_type or "", delivery_address=d.delivery_address or "",
                name=d.name or "", phone=d.phone or "", email=d.email or ""))
    s.commit()
    unit="—à—Ç" if d.quantity_unit=="pcs" else "–º¬≤"; deliv="–ù–∞ —Å–∫–ª–∞–¥" if d.delivery_type=="warehouse" else "–î–æ –æ–±—ä–µ–∫—Ç–∞"
    text=("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
          f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {d.material}\n–ö–æ–ª-–≤–æ: {d.quantity_value} {unit}\n–î–æ—Å—Ç–∞–≤–∫–∞: {deliv}\n"
          + (f"–ê–¥—Ä–µ—Å: {d.delivery_address}\n" if d.delivery_type=='site' else "")
          + f"–ò–º—è: {d.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {d.phone}\nEmail: {d.email}")
    await c.bot.send_message(chat_id=settings.admin_chat_id, text=text)
    try:
        await send_mail(settings.smtp_host, settings.smtp_port, settings.smtp_user, settings.smtp_password,
                        settings.mail_from, settings.mail_to, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram", text)
    except Exception as e:
        await c.bot.send_message(settings.admin_chat_id, text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
    await state.clear(); await c.message.edit_reply_markup()
    await c.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_kb)
